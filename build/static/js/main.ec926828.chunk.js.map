{"version":3,"sources":["App.js","serviceWorker.js","index.js","assets/img/man.png"],"names":["FormHandler","props","className","onSubmit","handleSubmit","name","required","type","placeholder","value","task","onChange","e","handleChange","date","src","man","ToDolist","data","length","map","val","i","compStatus","key","onClick","deleteItem","id","taskComplete","for","CompletedTasks","taskIncomplete","Header","App","event","preventDefault","tasks","state","splice","localStorage","setItem","JSON","stringify","setState","bind","getItem","this","parse","target","push","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.ec926828.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./App.scss\";\nimport man from './assets/img/man.png';\n// import peng from './assets/img/peng.png';\n// import tux from './assets/img/tux.png';\n\nconst FormHandler = props => {\n  return (<div className=\"row form-section border border-danger p-5 rounded\">\n    <div className=\"col-sm-12 col-md-8\">\n      <form onSubmit={props.handleSubmit} className=\"form-add-task\">\n        <div className=\"form-group\">\n          <label>\n            <h3>\n              <i>Task to do..</i>\n            </h3>\n          </label>\n          <textarea name=\"task\" required=\"required\" type=\"text\" className=\"form-control\" placeholder=\"Task to do\" value={props.task} onChange={e => props.handleChange(e, \"task\")}></textarea>\n        </div>\n        <div className=\"form-group\">\n          <label>\n            <h3>\n              <i>Complete By:</i>\n            </h3>\n          </label>\n          <input name=\"date\" type=\"date\" required=\"required\" className=\"form-control\" value={props.date} onChange={e => props.handleChange(e, \"date\")}/>\n        </div>\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Submit\"/>\n      </form>\n    </div>\n    <div className=\"col-sm-12 col-md-4 text-center\">\n      <img src={man} className=\"form-img-dim\"></img>\n    </div>\n  </div>);\n};\n\nconst ToDolist = props => {\n  if (!props.data.length) {\n    return <h1>NotFound</h1>;\n  }\n  return props.data.map((val, i) => {\n    if (val.compStatus === 0) {\n      return (<div className=\"card data-cont border-primary mt-4\" key={i}>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{val.task}</h5>\n          <p className=\"card-text\">{val.date}</p>\n          <input type=\"button\" className=\"btn btn-danger\" onClick={e => props.deleteItem(e, i)} name=\"button\" value=\"Delete Task\"/>\n          <div className=\"form-check\">\n            <input type=\"checkbox\" className=\"form-check-input\" id=\"to-do-complete\" onClick={e => props.taskComplete(e, i)}/>\n            <label className=\"form-check-label\" for=\"to-do-complete\">Task Complete</label>\n          </div>\n        </div>\n      </div>);\n    }\n  });\n};\n\nconst CompletedTasks = props => {\n  if (!props.data.length) {\n    return <h1>NotFound</h1>;\n  }\n  return props.data.map((val, i) => {\n    if (val.compStatus === 1) {\n      return (<div className=\"card data-cont border-success mt-4\" key={i}>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{val.task}</h5>\n          <p className=\"card-text\">{val.date}</p>\n          <input type=\"button\" className=\"btn btn-success\" onClick={e => props.deleteItem(e, i)} name=\"button\" value=\"Delete Task\"/>\n          <div className=\"form-check\">\n            <input type=\"checkbox\" className=\"form-check-input\" id=\"to-complete\" onClick={e => props.taskIncomplete(e, i)}/>\n            <label className=\"form-check-label\" for=\"to-complete\">Task In Complete</label>\n          </div>\n        </div>\n      </div>);\n    }\n  });\n};\n\nconst Header = props => {\n  return (<div>\n    <header className=\"row text-center p-4\">\n      <h1>My To Do List</h1>\n    </header>\n  </div>);\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      task: \"\",\n      date: 11 / 10 / 1995,\n      compStatus: 0,\n      tasks: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.taskComplete = this.taskComplete.bind(this);\n    this.taskIncomplete = this.taskIncomplete.bind(this);\n  }\n\n  componentDidMount() {\n    let data = localStorage.getItem(\"localData\");\n    if (!data) {\n      localStorage.setItem(\"localData\", []);\n    } else {\n      this.setState({tasks: JSON.parse(data)});\n    }\n  }\n\n  handleChange(event, key) {\n    this.setState({[key]: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const {tasks} = this.state;\n    tasks.push({task: this.state.task, date: this.state.date, compStatus: this.state.compStatus});\n    this.setState({tasks});\n    localStorage.setItem(\"localData\", JSON.stringify(tasks));\n  }\n\n  deleteItem = (event, i) => {\n    event.preventDefault();\n    const {tasks} = this.state;\n    tasks.splice(i, 1);\n    localStorage.setItem(\"localData\", JSON.stringify(tasks));\n    this.setState({tasks});\n  }\n\n  taskComplete = (event, i) => {\n    const {tasks} = this.state;\n    tasks[i].compStatus = 1;\n    localStorage.setItem(\"localData\", JSON.stringify(tasks));\n    this.setState({tasks});\n  }\n\n  taskIncomplete = (event, i) => {\n    const {tasks} = this.state;\n    tasks[i].compStatus = 0;\n    localStorage.setItem(\"localData\", JSON.stringify(tasks));\n    this.setState({tasks});\n  };\n\n  render() {\n    return (<div>\n      <Header/>\n      <FormHandler task={this.state.task} handleChange={this.handleChange} date={this.state.date} handleSubmit={this.handleSubmit}/>\n      <div className=\"row\">\n        <div className=\"col-sm-12 col-md-6 text-center mt-5\">\n          <h2>\n            <i>To Do</i>\n          </h2>\n          <ToDolist data={this.state.tasks} deleteItem={this.deleteItem} taskComplete={this.taskComplete}/>\n        </div>\n        <div className=\"col-sm-12 col-md-6 text-center mt-5\">\n          <h2>\n            <i>Completed</i>\n          </h2>\n          <CompletedTasks data={this.state.tasks} deleteItem={this.deleteItem} taskIncomplete={this.taskIncomplete}/>\n        </div>\n      </div>\n    </div >);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/man.954c7987.png\";"],"sourceRoot":""}