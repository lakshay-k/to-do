{"version":3,"sources":["assets/img/man.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","FormHandler","props","className","onSubmit","handleSubmit","name","required","type","placeholder","value","task","onChange","e","handleChange","date","src","man","alt","ToDolist","data","length","map","val","i","compStatus","key","onClick","deleteItem","id","taskComplete","for","Button","variant","handleEdit","CompletedTasks","taskIncomplete","Header","UpdateTask","show","onHide","handleCloseModel","closeButton","Title","Body","changeHandler","updateTaskList","index","curr","Date","setDate","getDate","toISOString","substr","App","event","preventDefault","tasks","state","splice","localStorage","setItem","JSON","stringify","setState","edit","target","editValue","bind","getItem","console","log","parse","this","push","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.019de7c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/man.954c7987.png\";","import React, {Component} from \"react\";\nimport \"./App.scss\";\nimport man from './assets/img/man.png';\nimport Modal from 'react-bootstrap/Modal';\nimport {Button} from 'react-bootstrap';\n\nconst FormHandler = props => {\n  return (<div className=\"row form-section border border-danger p-5 rounded\">\n    <div className=\"col-sm-12 col-md-8\">\n      <form onSubmit={props.handleSubmit} className=\"form-add-task\">\n        <div className=\"form-group\">\n          <label>\n            <h3>\n              <i>Task to do..</i>\n            </h3>\n          </label>\n          <textarea name=\"task\" required=\"required\" type=\"text\" className=\"form-control\" placeholder=\"Task to do\" value={props.task} onChange={e => props.handleChange(e, \"task\")}></textarea>\n        </div>\n        <div className=\"form-group\">\n          <label>\n            <h3>\n              <i>Complete By:</i>\n            </h3>\n          </label>\n          <input name=\"date\" type=\"date\" required=\"required\" className=\"form-control\" value={props.date} onChange={e => props.handleChange(e, \"date\")}/>\n        </div>\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Submit\"/>\n      </form>\n    </div>\n    <div className=\"col-sm-12 col-md-4 text-center\">\n      <img src={man} className=\"form-img-dim\" alt=\"person-img\"></img>\n    </div>\n  </div>);\n};\n\nconst ToDolist = props => {\n  if (!props.data.length) {\n    return <h1>NotFound</h1>;\n  }\n  return props.data.map((val, i) => {\n    if (val.compStatus === 0) {\n      return (<div className=\"card data-cont border-primary mt-4\" key={i}>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{val.task}</h5>\n          <p className=\"card-text\">{val.date}</p>\n          <input type=\"button\" className=\"btn btn-danger\" onClick={e => props.deleteItem(e, i)} name=\"button\" value=\"Delete Task\"/>\n          <div className=\"form-check\">\n            <input type=\"checkbox\" className=\"form-check-input\" id=\"to-do-complete\" onClick={e => props.taskComplete(e, i)}/>\n            <label className=\"form-check-label\" for=\"to-do-complete\">Task Complete</label>\n          </div>\n          <Button variant=\"primary\" onClick={(e) => props.handleEdit(e, i)}>Edit</Button>\n        </div>\n      </div>);\n    }\n  });\n};\n\nconst CompletedTasks = props => {\n  if (!props.data.length) {\n    return <h1>NotFound</h1>;\n  }\n  return props.data.map((val, i) => {\n    if (val.compStatus === 1) {\n      return (<div className=\"card data-cont border-success mt-4\" key={i}>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{val.task}</h5>\n          <p className=\"card-text\">{val.date}</p>\n          <input type=\"button\" className=\"btn btn-success\" onClick={e => props.deleteItem(e, i)} name=\"button\" value=\"Delete Task\"/>\n          <div className=\"form-check\">\n            <input type=\"checkbox\" className=\"form-check-input\" id=\"to-complete\" onClick={e => props.taskIncomplete(e, i)}/>\n            <label className=\"form-check-label\" for=\"to-complete\">Task In Complete</label>\n          </div>\n        </div>\n      </div>);\n    }\n  });\n};\n\nconst Header = props => {\n  return (<div>\n    <header className=\"row text-center p-4\">\n      <h1>My To Do List</h1>\n    </header>\n  </div>);\n};\n\nconst UpdateTask = props => {\n  return (<div>\n    <Modal show={props.show} onHide={props.handleCloseModel}>\n      <Modal.Header closeButton=\"closeButton\">\n        <Modal.Title>Modal heading</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <form>\n          <div className=\"form-group\">\n            <label>\n              <h3>\n                <i>Task to do..</i>\n              </h3>\n            </label>\n            <textarea name=\"task\" value={props.value.task} onChange={(e) => props.changeHandler(e, \"task\")} required=\"required\" type=\"text\" className=\"form-control\" placeholder=\"Task to do\" ></textarea>\n          </div>\n          <div className=\"form-group\">\n            <label>\n              <h3>\n                <i>Complete By:</i>\n              </h3>\n            </label>\n            <input name=\"date\" type=\"date\" value={props.value.date} onChange={(e) => props.changeHandler(e, \"date\")}  required=\"required\" className=\"form-control\" />\n          </div>\n          <Button variant=\"primary\" onClick={(e) => props.updateTaskList(e, props.value.index)}>\n            Save Changes\n          </Button>\n        </form>\n      </Modal.Body>\n    </Modal>\n  </div>);\n};\n\nvar curr = new Date();\ncurr.setDate(curr.getDate());\nvar date = curr.toISOString().substr(0,10);\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      task: \"\",\n      date: date,\n      compStatus: 0,\n      tasks: [],\n      show: false,\n      editValue: null,\n      edit: {}\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.taskComplete = this.taskComplete.bind(this);\n    this.taskIncomplete = this.taskIncomplete.bind(this);\n  }\n\n  componentDidMount() {\n    let data = localStorage.getItem(\"localData\");\n    if (!data) {\n      localStorage.setItem(\"localData\", []);\n    } else {\n      console.log(JSON.parse(data));\n      this.setState({tasks: JSON.parse(data)});\n    }\n  }\n\n  handleChange(event, key) {\n    this.setState({[key]: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const {tasks} = this.state;\n    tasks.push({task: this.state.task, date: this.state.date, compStatus: this.state.compStatus});\n    this.setState({tasks});\n    localStorage.setItem(\"localData\", JSON.stringify(tasks));\n  }\n\n\n  deleteItem = (event, i) => {\n    event.preventDefault();\n    const {tasks} = this.state;\n    tasks.splice(i, 1);\n    localStorage.setItem(\"localData\", JSON.stringify(tasks));\n    this.setState({tasks});\n  }\n\n  taskComplete = (event, i) => {\n    const {tasks} = this.state;\n    tasks[i].compStatus = 1;\n    localStorage.setItem(\"localData\", JSON.stringify(tasks));\n    this.setState({tasks});\n  }\n\n  taskIncomplete = (event, i) => {\n    const {tasks} = this.state;\n    tasks[i].compStatus = 0;\n    localStorage.setItem(\"localData\", JSON.stringify(tasks));\n    this.setState({tasks});\n  };\n\n  handleEdit = (e, i) => {\n    const {tasks} = this.state;\n    this.setState((state, props) => ({\n      show: !state.show,\n      edit: {...tasks[i], ...{index: i}},\n    }));\n  }\n\n  changeHandler = (e, type) => {\n    const {edit} = this.state;\n    edit[type] = e.target.value;\n    this.setState({edit});\n  }\n\n  updateTaskList = (e, i) => {\n    const {edit, tasks} = this.state;\n    tasks[i] = edit;\n    this.setState({tasks, show: !this.state.show,});\n    localStorage.setItem(\"localData\", JSON.stringify(tasks));\n  }\n\n  render() {\n    return (<div>\n      <Header/>\n      <FormHandler task={this.state.task} handleChange={this.handleChange} date={this.state.date} handleSubmit={this.handleSubmit}/>\n      <div className=\"row\">\n        <div className=\"col-sm-12 col-md-6 text-center mt-5\">\n          <h2>\n            <i>To Do</i>\n          </h2>\n          <ToDolist\n            data={this.state.tasks}\n            deleteItem={this.deleteItem}\n            taskComplete={this.taskComplete}\n            handleEdit={this.handleEdit}\n            />\n        </div>\n        <div className=\"col-sm-12 col-md-6 text-center mt-5\">\n          <h2>\n            <i>Completed</i>\n          </h2>\n          <CompletedTasks data={this.state.tasks} deleteItem={this.deleteItem} taskIncomplete={this.taskIncomplete}/>\n        </div>\n      </div>\n      {this.state.show ? <UpdateTask changeHandler={this.changeHandler} updateTaskList={this.updateTaskList} show={this.state.show} handleCloseModel={this.handleEdit} value={this.state.edit} /> : null}\n    </div >);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}